{"version":3,"sources":["TodoList.js","TodoForm.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","setTasks","tasks","map","t","type","onClick","item","id","completed","handleChangeCompleted","className","name","filter","handleDeleteTask","class","TodoForm","onSubmitForm","task","setTask","onSubmit","placeholder","onChange","e","target","value","Todo","useState","preventDefault","Math","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA6BeA,EA3BE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,SAASC,EAAS,EAATA,MAgBxB,OACI,6BAAKA,EAAMC,KAAI,SAACC,GAAD,OACf,+BACQ,uBAAOC,KAAK,WAAWC,QAAS,kBAbd,SAACF,GAE3BH,EAASC,EAAMC,KAAI,SAACI,GAChB,OAAGA,EAAKC,KAAOJ,EAAEI,GAEN,2BAAID,GAAX,IAAgBE,WAAWF,EAAKE,YAE7BF,MAMiCG,CAAsBN,MAC1D,sBAAMO,UAAWP,EAAEK,UAAU,MAAM,OAAnC,SAA4CL,EAAEQ,OAC9C,yBAAQN,QAAS,YAnBJ,SAACF,GACtBH,EAASC,EAAMW,QAAO,SAAAN,GAAI,OAAEA,EAAKC,KAAKJ,EAAEI,OAkBVM,CAAiBV,IAAvC,UAA6C,mBAAGW,MAAM,qBAAtD,SAHCX,EAAEI,UCVJQ,EARE,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,aAAaC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,QAEjC,OAAO,uBAAMC,SAAYH,EAAlB,UACC,uBAAOZ,KAAK,OAAOgB,YAAY,WAAWC,SAAU,SAACC,GAAD,OAAKJ,EAAQI,EAAEC,OAAOC,QAAQA,MAAOP,IACzF,uBAAOb,KAAK,SAASoB,MAAM,iBCqBxBC,EAxBF,WACT,MAAuBC,mBAAS,IAAhC,mBAAOT,EAAP,KAAYC,EAAZ,KACA,EAAwBQ,mBAAS,IAAjC,mBAAOzB,EAAP,KAAaD,EAAb,KAaA,OACI,sBAAKU,UAAU,WAAf,UACI,cAAC,EAAD,CAAUM,aAXO,SAACM,GACtBA,EAAEK,iBACF3B,EAAS,GAAD,mBAAKC,GAAL,CAAW,CAACU,KAAKM,EAAKT,WAAU,EAAMD,GAAiB,IAAdqB,KAAKC,aACtDX,EAAQ,KAQwCD,KAAMA,EAAMC,QAASA,IACjE,cAAC,EAAD,CAAUlB,SAAUA,EAAUC,MAAOA,Q,MCVlC6B,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e148ce3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoList = ({setTasks,tasks})=>{\r\n\r\n    const handleDeleteTask = (t)=>{\r\n        setTasks(tasks.filter(item=>item.id!==t.id))\r\n    }\r\n\r\n    const handleChangeCompleted = (t)=>{\r\n        \r\n        setTasks(tasks.map((item)=>{\r\n            if(item.id === t.id){\r\n\r\n                return {...item,completed:!item.completed}\r\n            }\r\n            return item\r\n        }))\r\n    }\r\n    return(\r\n        <ul>{tasks.map((t)=>\r\n        <li key={t.id}>\r\n                <input type=\"checkbox\" onClick={()=>handleChangeCompleted(t)}/>\r\n                <span className={t.completed?'red':'blue'}>{t.name}</span>\r\n                <button onClick={()=>{handleDeleteTask(t)}} ><i class=\"fas fa-trash-alt\"></i> </button>\r\n        </li>\r\n        )}</ul>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nconst TodoForm = ({onSubmitForm,task,setTask})=>{\r\n    \r\n    return(<form onSubmit = {onSubmitForm}>\r\n            <input type=\"text\" placeholder='Add todo' onChange={(e)=>setTask(e.target.value)} value={task}/>\r\n            <input type='submit' value='Add task' />\r\n        </form>  )\r\n}\r\n\r\nexport default TodoForm","import React,{useState} from 'react'\r\nimport TodoList from './TodoList'\r\nimport TodoForm from './TodoForm'\r\nconst Todo = ()=>{\r\n    const [task,setTask] = useState('')\r\n    const [tasks,setTasks]= useState([])\r\n    \r\n    \r\n    \r\n    const handleSubmitForm = (e)=>{\r\n        e.preventDefault()\r\n        setTasks([...tasks,{name:task,completed:false,id:Math.random()*1000}])\r\n        setTask('')\r\n    }\r\n    \r\n\r\n    \r\n\r\n    return(\r\n        <div className=\"main-div\">\r\n            <TodoForm onSubmitForm = {handleSubmitForm} task={task} setTask={setTask}/>\r\n            <TodoList setTasks={setTasks} tasks={tasks} />\r\n        </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Todo","import Todo from './Todo'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}